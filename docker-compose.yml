version: "3.7"

########################### NETWORKS
networks:
  t2_proxy:
    external:
      name: t2_proxy
  default:
    driver: bridge

########################### SERVICES
services:
# All services / apps go below this line
# Traefik 2 - Reverse Proxy 
# Touch (create empty files) traefik.log and acme/acme.json. Set acme.json permissions to 600. 
# touch $DOCKERDIR/traefik2/acme/acme.json 
# chmod 600 $DOCKERDIR/traefik2/acme/acme.json 
# touch $DOCKERDIR/traefik2/traefik.log 
  traefik:
    container_name: traefik
    image: traefik:picodon 
    restart: unless-stopped
    extra_hosts: 
      - host.docker.internal:172.17.0.1
    command:
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      #- --entrypoints.mqtt.address=:1883
      #- --entrypoints.websocket.address=:9001
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      - --api=true
      #- --api.insecure=true
      # - --serversTransport.insecureSkipVerify=true      
      - --log=true
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=t2_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
      # - --providers.file.filename=/path/to/file # Load dynamic configuration from a file.
      - --providers.file.watch=true # Only works on top level files in the rules folder
      #- --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
    networks:
      - t2_proxy    
    security_opt:
      - no-new-privileges:true
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    volumes:
      - $DOCKERDIR/traefik2/rules:/rules 
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/traefik2/acme/acme.json:/acme.json 
      - $DOCKERDIR/traefik2/traefik.log:/traefik.log 
      - $DOCKERDIR/shared:/shared
    environment:
      - CF_API_EMAIL=$CLOUDFLARE_EMAIL
      - CF_API_KEY=$CLOUDFLARE_API_KEY
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      #- "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"
      # - "traefik.http.routers.traefik-rtr.tls.domains[1].main=$SECONDDOMAINNAME" # Pulls main cert for second domain
      # - "traefik.http.routers.traefik-rtr.tls.domains[1].sans=*.$SECONDDOMAINNAME" # Pulls wildcard cert for second domain
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares          
      - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file"
  
  oauth:
    container_name: oauth
    image: thomseddon/traefik-forward-auth:latest
    restart: unless-stopped
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    environment:
      - CLIENT_ID=$GOOGLE_CLIENT_ID
      - CLIENT_SECRET=$GOOGLE_CLIENT_SECRET
      - SECRET=$OAUTH_SECRET
      - COOKIE_DOMAIN=$DOMAINNAME
      - INSECURE_COOKIE=false
      - AUTH_HOST=oauth.$DOMAINNAME
      - URL_PATH=/_oauth
      - WHITELIST=$MY_EMAIL
      - LOG_LEVEL=info
      - LOG_FORMAT=text
      - LIFETIME=2592000 # 30 days
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.oauth-rtr.entrypoints=https"
      - "traefik.http.routers.oauth-rtr.rule=Host(`oauth.$DOMAINNAME`)"
      - "traefik.http.routers.oauth-rtr.tls=true"
      ## HTTP Services
      - "traefik.http.routers.oauth-rtr.service=oauth-svc"
      - "traefik.http.services.oauth-svc.loadbalancer.server.port=4181"
      ## Middlewares
      - "traefik.http.routers.oauth-rtr.middlewares=chain-oauth@file"

  portainer:
    container_name: portainer
    image: portainer/portainer:latest
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/portainer/data:/data 
    environment:
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.portainer-rtr.entrypoints=https"
      - "traefik.http.routers.portainer-rtr.rule=Host(`portainer.$DOMAINNAME`)"
      - "traefik.http.routers.portainer-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.portainer-rtr.middlewares=chain-oauth@file" # Google OAuth 2.0
      ## HTTP Servicesa
      - "traefik.http.routers.portainer-rtr.service=portainer-svc"
      - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"

  transmission:
    image: ghcr.io/linuxserver/transmission
    container_name: transmission
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - TRANSMISSION_WEB_HOME=/combustion-release/ #optional
    volumes:
      - $DOCKERDIR/transmission/config:/config
      - /home/roman/media/TORRENT:/downloads
      - $DOCKERDIR/transmission/watch:/watch
    ports:
      - 9091:9091
      - 51413:51413
      - 51413:51413/udp
    restart: unless-stopped
    networks:
      - t2_proxy
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.transmission-rtr.entrypoints=https"
      - "traefik.http.routers.transmission-rtr.rule=Host(`torrent.$DOMAINNAME`)"
      - "traefik.http.routers.transmission-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.transmission-rtr.middlewares=chain-oauth@file" # Google OAuth 2.0
      ## HTTP Services
      - "traefik.http.services.transmission-svc.loadbalancer.server.port=9091"
  
  calibre:
    image: ghcr.io/linuxserver/calibre
    container_name: calibre
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $DOCKERDIR/calibre:/config
    networks:
      - t2_proxy
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.calibre-gui-rtr.entrypoints=https"
      - "traefik.http.routers.calibre-gui-rtr.rule=Host(`calibre.$DOMAINNAME`)"
      - "traefik.http.routers.calibre-gui-rtr.tls=true"
      - "traefik.http.routers.calibre-gui-rtr.service=calibre-gui-svc"
      - "traefik.http.routers.calibre-nas-rtr.entrypoints=https"
      - "traefik.http.routers.calibre-nas-rtr.rule=Host(`calibrenas.$DOMAINNAME`)"
      - "traefik.http.routers.calibre-nas-rtr.tls=true"
      - "traefik.http.routers.calibre-nas-rtr.service=calibre-nas-svc"
      ## Middlewares
      - "traefik.http.routers.calibre-gui-rtr.middlewares=chain-oauth@file"
      - "traefik.http.routers.calibre-nas-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.services.calibre-gui-svc.loadbalancer.server.port=8080"
      - "traefik.http.services.calibre-nas-svc.loadbalancer.server.port=8081"

  plex:
    image: ghcr.io/linuxserver/plex
    container_name: plex
    ports:
      - 32469:32469
      - 32400:32400
      - 32401:32401
      - 3005:3005
      - 8324:8324
      - 1900:1900/udp
      - 32410:32410/udp
      - 32412:32412/udp
      - 32413:32413/udp
      - 32414:32414/udp
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - VERSION=docker
    volumes:
      - $DOCKERDIR/plex/config:/config
      - $DOCKERDIR/plex/transcode:/transcode
      - /home/roman/media/SERIALS:/tv
      - /home/roman/media/MOVIES:/movies
    restart: unless-stopped

  homeassistant:
    container_name: homeassistant
    restart: always
    image: homeassistant/home-assistant
    devices:
      - /dev/ttyACM0:/dev/ttyACM0
    depends_on:
      - 'mariadb'
    network_mode: host
    volumes:
      - $DOCKERDIR/homeAssistant:/config
      - /etc/localtime:/etc/localtime:ro
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.ha-rtr.entrypoints=https"
      - "traefik.http.routers.ha-rtr.rule=Host(`ha.$DOMAINNAME`)"
      - "traefik.http.routers.ha-rtr.tls=true"
      ## HTTP Services
      - "traefik.http.services.ha-svc.loadbalancer.server.port=8123"

  mariadb:
    container_name: mariadb
    image: mariadb
    restart: always
    volumes:
      - $DOCKERDIR/mariadb/config:/etc/mysql/conf.d
      - $DOCKERDIR/mariadb/data:/var/lib/mysql
    environment:
      TZ: $TZ
      MYSQL_USER: $MYSQL_USER
      MYSQL_PASSWORD: $MYSQL_PASSWORD
      MYSQL_DATABASE: $MYSQL_DATABASE
      MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD

  sqlpad:
    image: sqlpad/sqlpad:latest
    hostname: 'sqlpad'
    container_name: sqlpad
    depends_on:
      - 'mariadb'
    ports:
      - '3000:3000'
    environment:
      SQLPAD_ADMIN: $SQLPAD_ADMIN
      SQLPAD_ADMIN_PASSWORD: $SQLPAD_ADMIN_PASSWORD
      SQLPAD_APP_LOG_LEVEL: debug
      SQLPAD_WEB_LOG_LEVEL: warn
      SQLPAD_SEED_DATA_PATH: /etc/sqlpad/seed-data
      SQLPAD_BACKEND_DB_URI: mariadb://root:$MYSQL_ROOT_PASSWORD@mariadb:3306/db?timezone=$TZ
      SQLPAD_SESSION_STORE: 'database'
      SQLPAD_DB_PATH: '/var/lib/sqlpad'
      SQLPAD_DB_IN_MEMORY: 'false'
      SQLPAD_QUERY_RESULT_STORE: 'database'
      # This adds a pre-configured connection to point to the database
      # used as the backend for SQLPad itself
      SQLPAD_CONNECTIONS__mariad__name: 'MariaDB'
      SQLPAD_CONNECTIONS__mariad__driver: mysql
      SQLPAD_CONNECTIONS__mariad__host: mariadb
      SQLPAD_CONNECTIONS__mariad__port: 3306
      SQLPAD_CONNECTIONS__mariad__database: $MYSQL_DATABASE
      SQLPAD_CONNECTIONS__mariad__username: root
      SQLPAD_CONNECTIONS__mariad__password: $MYSQL_ROOT_PASSWORD
    volumes:
      - $DOCKERDIR/sqlpad:/etc/sqlpad/seed-data